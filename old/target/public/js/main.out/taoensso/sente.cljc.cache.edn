{:rename-macros {}, :renames {}, :externs {Error {}, Object {}, require {}}, :use-macros {elide-require taoensso.sente, swap-in! taoensso.encore, warnf taoensso.timbre, go cljs.core.async.macros, format taoensso.encore, have taoensso.encore, swapped taoensso.encore, go-loop cljs.core.async.macros, reset-in! taoensso.encore, have! taoensso.encore, have? taoensso.encore, debugf taoensso.timbre, tracef taoensso.timbre, infof taoensso.timbre, errorf taoensso.timbre}, :excludes #{}, :name taoensso.sente, :imports nil, :requires {timbre taoensso.timbre, interfaces taoensso.sente.interfaces, async cljs.core.async, taoensso.sente.interfaces taoensso.sente.interfaces, cljs.core.async cljs.core.async, enc taoensso.encore, taoensso.timbre taoensso.timbre, str clojure.string, clojure.string clojure.string, taoensso.encore taoensso.encore}, :cljs.spec/speced-vars [], :uses {<! cljs.core.async, swap-in! taoensso.encore, chan cljs.core.async, format taoensso.encore, swapped taoensso.encore, reset-in! taoensso.encore, >! cljs.core.async, put! cljs.core.async}, :defs {chsk-state->closed {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 823, :column 11, :end-line 823, :end-column 29, :private true, :arglists (quote ([state reason]))}, :private true, :name taoensso.sente/chsk-state->closed, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 29, :method-params ([state reason]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 823, :end-line 823, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state reason]))}, assert-send-args {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 782, :column 11, :end-line 782, :end-column 27, :private true, :arglists (quote ([x ?timeout-ms ?cb]))}, :private true, :name taoensso.sente/assert-send-args, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 27, :method-params ([x ?timeout-ms ?cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 782, :end-line 782, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x ?timeout-ms ?cb]))}, map->ChAjaxSocket {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 1133, :column 15, :end-line 1133, :end-column 27, :internal-ctor true, :factory :map, :arglists (quote ([G__29628]))}, :name taoensso.sente/map->ChAjaxSocket, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 27, :method-params ([G__29628]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :internal-ctor true, :factory :map, :line 1133, :end-line 1133, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__29628]))}, sente-version {:name taoensso.sente/sente-version, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 107, :column 1, :end-line 107, :end-column 19, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 107, :column 6, :end-line 107, :end-column 19}, :doc "Useful for identifying client/server mismatch", :tag cljs.core/IVector}, ->EdnPacker {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 233, :column 10, :end-line 233, :end-column 19, :protocols #{taoensso.sente.interfaces/IPacker}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([]))}, :protocols #{taoensso.sente.interfaces/IPacker}, :name taoensso.sente/->EdnPacker, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 233, :end-line 233, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil}, as-event {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 143, :column 7, :end-line 143, :end-column 15, :arglists (quote ([x]))}, :name taoensso.sente/as-event, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, server-event-msg? {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 160, :column 7, :end-line 160, :end-column 24, :arglists (quote ([x]))}, :name taoensso.sente/server-event-msg?, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 24, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 160, :end-line 160, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, send-buffered-server-evs>ws-clients! {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 682, :column 8, :end-line 682, :end-column 44, :private true, :arglists (quote ([conns_ uid buffered-evs-pstr upd-conn!])), :doc "Actually pushes buffered events (as packed-str) to all uid's WebSocket conns."}, :private true, :name taoensso.sente/send-buffered-server-evs>ws-clients!, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 44, :method-params ([conns_ uid buffered-evs-pstr upd-conn!]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 682, :end-line 682, :max-fixed-arity 4, :fn-var true, :arglists (quote ([conns_ uid buffered-evs-pstr upd-conn!])), :doc "Actually pushes buffered events (as packed-str) to all uid's WebSocket conns."}, pack {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 217, :column 8, :end-line 217, :end-column 12, :private true, :arglists (quote ([packer clj] [packer clj ?cb-uuid])), :doc "clj->prefixed-pstr", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([packer clj] [packer clj ?cb-uuid]), :arglists ([packer clj] [packer clj ?cb-uuid]), :arglists-meta (nil nil)}}, :private true, :name taoensso.sente/pack, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([packer clj] [packer clj ?cb-uuid]), :arglists ([packer clj] [packer clj ?cb-uuid]), :arglists-meta (nil nil)}, :method-params ([packer clj] [packer clj ?cb-uuid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 217, :end-line 217, :max-fixed-arity 3, :fn-var true, :arglists ([packer clj] [packer clj ?cb-uuid]), :doc "clj->prefixed-pstr"}, chsk-send! {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 766, :column 10, :end-line 766, :end-column 20, :arglists (quote ([chsk ev] [chsk ev ?timeout-ms ?cb] [chsk ev opts])), :doc "Sends `[ev-id ev-?data :as event]`, returns true on apparent success.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([chsk ev] [chsk ev ?timeout-ms ?cb] [chsk ev opts]), :arglists ([chsk ev] [chsk ev ?timeout-ms ?cb] [chsk ev opts]), :arglists-meta (nil nil nil)}}, :name taoensso.sente/chsk-send!, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([chsk ev] [chsk ev ?timeout-ms ?cb] [chsk ev opts]), :arglists ([chsk ev] [chsk ev ?timeout-ms ?cb] [chsk ev opts]), :arglists-meta (nil nil nil)}, :method-params ([chsk ev] [chsk ev ?timeout-ms ?cb] [chsk ev opts]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 4, :line 766, :end-line 766, :max-fixed-arity 4, :fn-var true, :arglists ([chsk ev] [chsk ev ?timeout-ms ?cb] [chsk ev opts]), :doc "Sends `[ev-id ev-?data :as event]`, returns true on apparent success."}, validate-event {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 121, :column 7, :end-line 121, :end-column 21, :arglists (quote ([x])), :doc "Returns nil if given argument is a valid [ev-id ?ev-data] form. Otherwise\n  returns a map of validation errors like `{:wrong-type {:expected _ :actual _}}`."}, :name taoensso.sente/validate-event, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 21, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns nil if given argument is a valid [ev-id ?ev-data] form. Otherwise\n  returns a map of validation errors like `{:wrong-type {:expected _ :actual _}}`."}, event? {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 142, :column 7, :end-line 142, :end-column 13, :arglists (quote ([x])), :doc "Valid [ev-id ?ev-data] form?"}, :name taoensso.sente/event?, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Valid [ev-id ?ev-data] form?"}, event-msg? {:name taoensso.sente/event-msg?, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 1578, :column 1, :end-line 1578, :end-column 16, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 1578, :column 6, :end-line 1578, :end-column 16}}, make-channel-socket! {:name taoensso.sente/make-channel-socket!, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 1580, :column 1, :end-line 1580, :end-column 26, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 1580, :column 6, :end-line 1580, :end-column 26}, :doc "Platform-specific alias for `make-channel-socket-server!` or\n  `make-channel-socket-client!`. Please see the appropriate aliased fn\n   docstring for details."}, make-channel-socket-server! {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 267, :column 7, :end-line 267, :end-column 34, :arglists (quote ([web-server-ch-adapter & [{:keys [recv-buf-or-n ws-kalive-ms lp-timeout-ms send-buf-ms-ajax send-buf-ms-ws user-id-fn csrf-token-fn handshake-data-fn packer], :or {ws-kalive-ms (enc/ms :secs 25), send-buf-ms-ws 30, lp-timeout-ms (enc/ms :secs 20), csrf-token-fn (fn [ring-req] (or (get-in ring-req [:session :csrf-token]) (get-in ring-req [:session :ring.middleware.anti-forgery/anti-forgery-token]) (get-in ring-req [:session "__anti-forgery-token"]))), packer :edn, send-buf-ms-ajax 100, handshake-data-fn (fn [ring-req] nil), user-id-fn (fn [ring-req] (get-in ring-req [:session :uid])), recv-buf-or-n (async/sliding-buffer 1000)}}]])), :doc "Takes a web server adapter[1] and returns a map with keys:\n    :ch-recv ; core.async channel to receive `event-msg`s (internal or from clients).\n    :send-fn ; (fn [user-id ev] for server>user push.\n    :ajax-post-fn                ; (fn [ring-req]) for Ring CSRF-POST + chsk URL.\n    :ajax-get-or-ws-handshake-fn ; (fn [ring-req]) for Ring GET + chsk URL.\n    :connected-uids ; Watchable, read-only (atom {:ws #{_} :ajax #{_} :any #{_}}).\n\n  Common options:\n    :user-id-fn        ; (fn [ring-req]) -> unique user-id for server>user push.\n    :csrf-token-fn     ; (fn [ring-req]) -> CSRF token for Ajax POSTs.\n    :handshake-data-fn ; (fn [ring-req]) -> arb user data to append to handshake evs.\n    :ws-kalive-ms      ; Ping to keep a WebSocket conn alive if no activity\n                       ; w/in given msecs. Should be different to client's :ws-kalive-ms.\n    :lp-timeout-ms     ; Timeout (repoll) long-polling Ajax conns after given msecs.\n    :send-buf-ms-ajax  ; [2]\n    :send-buf-ms-ws    ; [2]\n    :packer            ; :edn (default), or an IPacker implementation.\n\n  [1] e.g. `(taoensso.sente.server-adapters.http-kit/get-sch-adapter)` or\n           `(taoensso.sente.server-adapters.immutant/get-sch-adapter)`.\n      You must have the necessary web-server dependency in your project.clj and\n      the necessary entry in your namespace's `ns` form.\n\n  [2] Optimization to allow transparent batching of rapidly-triggered\n      server>user pushes. This is esp. important for Ajax clients which use a\n      (slow) reconnecting poller. Actual event dispatch may occur <= given ms\n      after send call (larger values => larger batch windows).", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(web-server-ch-adapter [{:keys [recv-buf-or-n ws-kalive-ms lp-timeout-ms send-buf-ms-ajax send-buf-ms-ws user-id-fn csrf-token-fn handshake-data-fn packer], :or {ws-kalive-ms (enc/ms :secs 25), send-buf-ms-ws 30, lp-timeout-ms (enc/ms :secs 20), csrf-token-fn (fn [ring-req] (or (get-in ring-req [:session :csrf-token]) (get-in ring-req [:session :ring.middleware.anti-forgery/anti-forgery-token]) (get-in ring-req [:session "__anti-forgery-token"]))), packer :edn, send-buf-ms-ajax 100, handshake-data-fn (fn [ring-req] nil), user-id-fn (fn [ring-req] (get-in ring-req [:session :uid])), recv-buf-or-n (async/sliding-buffer 1000)}}])], :arglists ([web-server-ch-adapter & [{:keys [recv-buf-or-n ws-kalive-ms lp-timeout-ms send-buf-ms-ajax send-buf-ms-ws user-id-fn csrf-token-fn handshake-data-fn packer], :or {ws-kalive-ms (enc/ms :secs 25), send-buf-ms-ws 30, lp-timeout-ms (enc/ms :secs 20), csrf-token-fn (fn [ring-req] (or (get-in ring-req [:session :csrf-token]) (get-in ring-req [:session :ring.middleware.anti-forgery/anti-forgery-token]) (get-in ring-req [:session "__anti-forgery-token"]))), packer :edn, send-buf-ms-ajax 100, handshake-data-fn (fn [ring-req] nil), user-id-fn (fn [ring-req] (get-in ring-req [:session :uid])), recv-buf-or-n (async/sliding-buffer 1000)}}]]), :arglists-meta (nil)}}, :name taoensso.sente/make-channel-socket-server!, :variadic true, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 34, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(web-server-ch-adapter [{:keys [recv-buf-or-n ws-kalive-ms lp-timeout-ms send-buf-ms-ajax send-buf-ms-ws user-id-fn csrf-token-fn handshake-data-fn packer], :or {ws-kalive-ms (enc/ms :secs 25), send-buf-ms-ws 30, lp-timeout-ms (enc/ms :secs 20), csrf-token-fn (fn [ring-req] (or (get-in ring-req [:session :csrf-token]) (get-in ring-req [:session :ring.middleware.anti-forgery/anti-forgery-token]) (get-in ring-req [:session "__anti-forgery-token"]))), packer :edn, send-buf-ms-ajax 100, handshake-data-fn (fn [ring-req] nil), user-id-fn (fn [ring-req] (get-in ring-req [:session :uid])), recv-buf-or-n (async/sliding-buffer 1000)}}])], :arglists ([web-server-ch-adapter & [{:keys [recv-buf-or-n ws-kalive-ms lp-timeout-ms send-buf-ms-ajax send-buf-ms-ws user-id-fn csrf-token-fn handshake-data-fn packer], :or {ws-kalive-ms (enc/ms :secs 25), send-buf-ms-ws 30, lp-timeout-ms (enc/ms :secs 20), csrf-token-fn (fn [ring-req] (or (get-in ring-req [:session :csrf-token]) (get-in ring-req [:session :ring.middleware.anti-forgery/anti-forgery-token]) (get-in ring-req [:session "__anti-forgery-token"]))), packer :edn, send-buf-ms-ajax 100, handshake-data-fn (fn [ring-req] nil), user-id-fn (fn [ring-req] (get-in ring-req [:session :uid])), recv-buf-or-n (async/sliding-buffer 1000)}}]]), :arglists-meta (nil)}, :method-params [(web-server-ch-adapter [{:keys [recv-buf-or-n ws-kalive-ms lp-timeout-ms send-buf-ms-ajax send-buf-ms-ws user-id-fn csrf-token-fn handshake-data-fn packer], :or {ws-kalive-ms (enc/ms :secs 25), send-buf-ms-ws 30, lp-timeout-ms (enc/ms :secs 20), csrf-token-fn (fn [ring-req] (or (get-in ring-req [:session :csrf-token]) (get-in ring-req [:session :ring.middleware.anti-forgery/anti-forgery-token]) (get-in ring-req [:session "__anti-forgery-token"]))), packer :edn, send-buf-ms-ajax 100, handshake-data-fn (fn [ring-req] nil), user-id-fn (fn [ring-req] (get-in ring-req [:session :uid])), recv-buf-or-n (async/sliding-buffer 1000)}}])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 267, :end-line 267, :max-fixed-arity 1, :fn-var true, :arglists ([web-server-ch-adapter & [{:keys [recv-buf-or-n ws-kalive-ms lp-timeout-ms send-buf-ms-ajax send-buf-ms-ws user-id-fn csrf-token-fn handshake-data-fn packer], :or {ws-kalive-ms (enc/ms :secs 25), send-buf-ms-ws 30, lp-timeout-ms (enc/ms :secs 20), csrf-token-fn (fn [ring-req] (or (get-in ring-req [:session :csrf-token]) (get-in ring-req [:session :ring.middleware.anti-forgery/anti-forgery-token]) (get-in ring-req [:session "__anti-forgery-token"]))), packer :edn, send-buf-ms-ajax 100, handshake-data-fn (fn [ring-req] nil), user-id-fn (fn [ring-req] (get-in ring-req [:session :uid])), recv-buf-or-n (async/sliding-buffer 1000)}}]]), :doc "Takes a web server adapter[1] and returns a map with keys:\n    :ch-recv ; core.async channel to receive `event-msg`s (internal or from clients).\n    :send-fn ; (fn [user-id ev] for server>user push.\n    :ajax-post-fn                ; (fn [ring-req]) for Ring CSRF-POST + chsk URL.\n    :ajax-get-or-ws-handshake-fn ; (fn [ring-req]) for Ring GET + chsk URL.\n    :connected-uids ; Watchable, read-only (atom {:ws #{_} :ajax #{_} :any #{_}}).\n\n  Common options:\n    :user-id-fn        ; (fn [ring-req]) -> unique user-id for server>user push.\n    :csrf-token-fn     ; (fn [ring-req]) -> CSRF token for Ajax POSTs.\n    :handshake-data-fn ; (fn [ring-req]) -> arb user data to append to handshake evs.\n    :ws-kalive-ms      ; Ping to keep a WebSocket conn alive if no activity\n                       ; w/in given msecs. Should be different to client's :ws-kalive-ms.\n    :lp-timeout-ms     ; Timeout (repoll) long-polling Ajax conns after given msecs.\n    :send-buf-ms-ajax  ; [2]\n    :send-buf-ms-ws    ; [2]\n    :packer            ; :edn (default), or an IPacker implementation.\n\n  [1] e.g. `(taoensso.sente.server-adapters.http-kit/get-sch-adapter)` or\n           `(taoensso.sente.server-adapters.immutant/get-sch-adapter)`.\n      You must have the necessary web-server dependency in your project.clj and\n      the necessary entry in your namespace's `ns` form.\n\n  [2] Optimization to allow transparent batching of rapidly-triggered\n      server>user pushes. This is esp. important for Ajax clients which use a\n      (slow) reconnecting poller. Actual event dispatch may occur <= given ms\n      after send call (larger values => larger batch windows)."}, node-target? {:name taoensso.sente/node-target?, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 110, :column 10, :end-line 110, :end-column 37, :private true, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 110, :column 25, :end-line 110, :end-column 37, :private true}, :tag boolean}, ajax-lite {:name taoensso.sente/ajax-lite, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 749, :column 10, :end-line 749, :end-column 24, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 749, :column 15, :end-line 749, :end-column 24}, :doc "Alias of `taoensso.encore/ajax-lite`"}, get-chsk-url {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 1366, :column 11, :end-line 1366, :end-column 23, :private true, :arglists (quote ([protocol host path type]))}, :private true, :name taoensso.sente/get-chsk-url, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 23, :method-params ([protocol host path type]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 1366, :end-line 1366, :max-fixed-arity 4, :fn-var true, :arglists (quote ([protocol host path type]))}, -chsk-send! {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 755, :column 7, :end-line 755, :end-column 18, :protocol taoensso.sente/IChSocket, :doc nil, :arglists (quote ([chsk ev opts]))}, :protocol taoensso.sente/IChSocket, :name taoensso.sente/-chsk-send!, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 18, :method-params ([chsk ev opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 751, :end-line 755, :max-fixed-arity 3, :fn-var true, :arglists (quote ([chsk ev opts])), :doc nil}, -chsk-reconnect! {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 754, :column 7, :end-line 754, :end-column 23, :protocol taoensso.sente/IChSocket, :doc nil, :arglists (quote ([chsk]))}, :protocol taoensso.sente/IChSocket, :name taoensso.sente/-chsk-reconnect!, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 23, :method-params ([chsk]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 751, :end-line 754, :max-fixed-arity 1, :fn-var true, :arglists (quote ([chsk])), :doc nil}, receive-handshake! {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 871, :column 11, :end-line 871, :end-column 29, :private true, :arglists (quote ([chsk-type chsk clj]))}, :private true, :name taoensso.sente/receive-handshake!, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 29, :method-params ([chsk-type chsk clj]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 871, :end-line 871, :max-fixed-arity 3, :fn-var true, :arglists (quote ([chsk-type chsk clj]))}, start-client-chsk-router! {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 1562, :column 7, :end-line 1562, :end-column 32, :arglists (quote ([ch-recv event-msg-handler & [{:as opts, :keys [trace-evs? error-handler]}]])), :doc "Creates a simple go-loop to call `(event-msg-handler <server-event-msg>)`\n  and log any errors. Returns a `(fn stop! [])`. Note that advanced users may\n  prefer to just write their own loop against `ch-recv`.\n\n  Nb performance note: since your `event-msg-handler` fn will be executed\n  within a simple go block, you'll want this fn to be ~non-blocking\n  (you'll especially want to avoid blocking IO) to avoid starving the\n  core.async thread pool under load. To avoid blocking, you can use futures,\n  agents, core.async, etc. as appropriate.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ch-recv event-msg-handler [{:as opts, :keys [trace-evs? error-handler]}])], :arglists ([ch-recv event-msg-handler & [{:as opts, :keys [trace-evs? error-handler]}]]), :arglists-meta (nil)}}, :name taoensso.sente/start-client-chsk-router!, :variadic true, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ch-recv event-msg-handler [{:as opts, :keys [trace-evs? error-handler]}])], :arglists ([ch-recv event-msg-handler & [{:as opts, :keys [trace-evs? error-handler]}]]), :arglists-meta (nil)}, :method-params [(ch-recv event-msg-handler [{:as opts, :keys [trace-evs? error-handler]}])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1562, :end-line 1562, :max-fixed-arity 2, :fn-var true, :arglists ([ch-recv event-msg-handler & [{:as opts, :keys [trace-evs? error-handler]}]]), :doc "Creates a simple go-loop to call `(event-msg-handler <server-event-msg>)`\n  and log any errors. Returns a `(fn stop! [])`. Note that advanced users may\n  prefer to just write their own loop against `ch-recv`.\n\n  Nb performance note: since your `event-msg-handler` fn will be executed\n  within a simple go block, you'll want this fn to be ~non-blocking\n  (you'll especially want to avoid blocking IO) to avoid starving the\n  core.async thread pool under load. To avoid blocking, you can use futures,\n  agents, core.async, etc. as appropriate."}, chsk-destroy! {:name taoensso.sente/chsk-destroy!, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 763, :column 6, :end-line 763, :end-column 24, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 763, :column 11, :end-line 763, :end-column 24}, :doc "Deprecated"}, ->ChAjaxSocket {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 1133, :column 15, :end-line 1133, :end-column 27, :internal-ctor true, :factory :positional, :arglists (quote ([client-id chs params packer url state_ instance-handle_ ever-opened?_ backoff-ms-fn ajax-opts curr-xhr_]))}, :name taoensso.sente/->ChAjaxSocket, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 27, :method-params ([client-id chs params packer url state_ instance-handle_ ever-opened?_ backoff-ms-fn ajax-opts curr-xhr_]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :internal-ctor true, :factory :positional, :line 1133, :end-line 1133, :max-fixed-arity 11, :fn-var true, :arglists (quote ([client-id chs params packer url state_ instance-handle_ ever-opened?_ backoff-ms-fn ajax-opts curr-xhr_]))}, send-buffered-server-evs>ajax-clients! {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 691, :column 8, :end-line 691, :end-column 46, :private true, :arglists (quote ([conns_ uid buffered-evs-pstr])), :doc "Actually pushes buffered events (as packed-str) to all uid's Ajax conns.\n  Allows some time for possible Ajax poller reconnects."}, :private true, :name taoensso.sente/send-buffered-server-evs>ajax-clients!, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 46, :method-params ([conns_ uid buffered-evs-pstr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 691, :end-line 691, :max-fixed-arity 3, :fn-var true, :arglists (quote ([conns_ uid buffered-evs-pstr])), :doc "Actually pushes buffered events (as packed-str) to all uid's Ajax conns.\n  Allows some time for possible Ajax poller reconnects."}, default-client-side-ajax-timeout-ms {:meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 1126, :column 16, :end-line 1126, :end-column 51, :private true}, :private true, :name taoensso.sente/default-client-side-ajax-timeout-ms, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 51, :column 1, :line 1126, :end-line 1126, :tag any, :doc "We must set *some* client-side timeout otherwise an unpredictable (and\n  probably too short) browser default will be used. Must be > server's\n  :lp-timeout-ms."}, ChAjaxSocket {:num-fields 11, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative taoensso.sente/IChSocket cljs.core/IMap cljs.core/ILookup}, :name taoensso.sente/ChAjaxSocket, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 27, :type true, :column 15, :internal-ctor true, :line 1133, :record true, :end-line 1133, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, set-logging-level! {:name taoensso.sente/set-logging-level!, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 1613, :column 3, :end-line 1613, :end-column 26, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 1613, :column 8, :end-line 1613, :end-column 26}, :doc "DEPRECATED. Please use `timbre/set-level!` instead"}, ->ChAutoSocket {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 1299, :column 15, :end-line 1299, :end-column 27, :internal-ctor true, :factory :positional, :arglists (quote ([ws-chsk-opts ajax-chsk-opts state_ impl_]))}, :name taoensso.sente/->ChAutoSocket, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 27, :method-params ([ws-chsk-opts ajax-chsk-opts state_ impl_]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :internal-ctor true, :factory :positional, :line 1299, :end-line 1299, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ws-chsk-opts ajax-chsk-opts state_ impl_]))}, -chsk-disconnect! {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 753, :column 7, :end-line 753, :end-column 24, :protocol taoensso.sente/IChSocket, :doc nil, :arglists (quote ([chsk reason]))}, :protocol taoensso.sente/IChSocket, :name taoensso.sente/-chsk-disconnect!, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 24, :method-params ([chsk reason]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 751, :end-line 753, :max-fixed-arity 2, :fn-var true, :arglists (quote ([chsk reason])), :doc nil}, start-chsk-router! {:name taoensso.sente/start-chsk-router!, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 1587, :column 1, :end-line 1587, :end-column 24, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 1587, :column 6, :end-line 1587, :end-column 24}, :doc "Platform-specific alias for `start-server-chsk-router!` or\n  `start-client-chsk-router!`. Please see the appropriate aliased fn\n  docstring for details."}, put-server-event-msg>ch-recv! {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 178, :column 8, :end-line 178, :end-column 37, :private true, :arglists (quote ([ch-recv {:as ev-msg, :keys [event ?reply-fn]}])), :doc "All server `event-msg`s go through this"}, :private true, :name taoensso.sente/put-server-event-msg>ch-recv!, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 37, :method-params ([ch-recv p__28848]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 178, :end-line 178, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ch-recv {:as ev-msg, :keys [event ?reply-fn]}])), :doc "All server `event-msg`s go through this"}, coerce-packer {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 240, :column 8, :end-line 240, :end-column 21, :private true, :arglists (quote ([x]))}, :private true, :name taoensso.sente/coerce-packer, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 21, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 240, :end-line 240, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, -chsk-connect! {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 752, :column 7, :end-line 752, :end-column 21, :protocol taoensso.sente/IChSocket, :doc nil, :arglists (quote ([chsk]))}, :protocol taoensso.sente/IChSocket, :name taoensso.sente/-chsk-connect!, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 21, :method-params ([chsk]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 751, :end-line 752, :max-fixed-arity 1, :fn-var true, :arglists (quote ([chsk])), :doc nil}, default-edn-packer {:name taoensso.sente/default-edn-packer, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 238, :column 1, :end-line 238, :end-column 34, :private true, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 238, :column 16, :end-line 238, :end-column 34, :private true}, :tag taoensso.sente/EdnPacker}, new-ChAjaxSocket {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 1289, :column 11, :end-line 1289, :end-column 27, :private true, :arglists (quote ([opts]))}, :private true, :name taoensso.sente/new-ChAjaxSocket, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 27, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 1289, :end-line 1289, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts]))}, receive-buffered-evs! {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 856, :column 11, :end-line 856, :end-column 32, :private true, :arglists (quote ([chs clj]))}, :private true, :name taoensso.sente/receive-buffered-evs!, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 32, :method-params ([chs clj]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 856, :end-line 856, :max-fixed-arity 2, :fn-var true, :arglists (quote ([chs clj]))}, chsk-connect! {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 759, :column 12, :end-line 759, :end-column 25, :arglists (quote ([chsk]))}, :name taoensso.sente/chsk-connect!, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 25, :method-params ([chsk]), :protocol-impl nil, :arglists-meta (nil nil), :column 6, :line 759, :end-line 759, :max-fixed-arity 1, :fn-var true, :arglists (quote ([chsk]))}, -start-chsk-router! {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 1506, :column 8, :end-line 1506, :end-column 27, :private true, :arglists (quote ([server? ch-recv event-msg-handler opts]))}, :private true, :name taoensso.sente/-start-chsk-router!, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 27, :method-params ([server? ch-recv event-msg-handler opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1506, :end-line 1506, :max-fixed-arity 4, :fn-var true, :arglists (quote ([server? ch-recv event-msg-handler opts]))}, EdnPacker {:num-fields 0, :protocols #{taoensso.sente.interfaces/IPacker}, :name taoensso.sente/EdnPacker, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 19, :type true, :column 10, :line 233, :record false, :end-line 233, :skip-protocol-flag nil}, ChAutoSocket {:num-fields 4, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative taoensso.sente/IChSocket cljs.core/IMap cljs.core/ILookup}, :name taoensso.sente/ChAutoSocket, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 27, :type true, :column 15, :internal-ctor true, :line 1299, :record true, :end-line 1299, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, cb-error? {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 191, :column 16, :end-line 191, :end-column 25, :arglists (quote ([cb-reply-clj]))}, :name taoensso.sente/cb-error?, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 25, :method-params ([cb-reply-clj]), :protocol-impl nil, :arglists-meta (nil nil), :column 10, :line 191, :end-line 191, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cb-reply-clj]))}, unpack {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 199, :column 8, :end-line 199, :end-column 14, :private true, :arglists (quote ([packer prefixed-pstr])), :doc "prefixed-pstr->[clj ?cb-uuid]"}, :private true, :name taoensso.sente/unpack, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 14, :method-params ([packer prefixed-pstr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 199, :end-line 199, :max-fixed-arity 2, :fn-var true, :arglists (quote ([packer prefixed-pstr])), :doc "prefixed-pstr->[clj ?cb-uuid]"}, chsk-disconnect! {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 760, :column 12, :end-line 760, :end-column 28, :arglists (quote ([chsk]))}, :name taoensso.sente/chsk-disconnect!, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 28, :method-params ([chsk]), :protocol-impl nil, :arglists-meta (nil nil), :column 6, :line 760, :end-line 760, :max-fixed-arity 1, :fn-var true, :arglists (quote ([chsk]))}, default-chsk-url-fn {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 1617, :column 11, :end-line 1617, :end-column 30}, :name taoensso.sente/default-chsk-url-fn, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 30, :method-params ([path p__29813 websocket?]), :protocol-impl nil, :arglists-meta (), :column 6, :line 1617, :end-line 1617, :max-fixed-arity 3, :fn-var true, :arglists nil, :doc "DEPRECATED"}, start-chsk-router-loop! {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 1606, :column 12, :end-line 1606, :end-column 35, :arglists (quote ([event-handler ch-recv])), :doc "DEPRECATED: Please use `start-chsk-router!` instead"}, :name taoensso.sente/start-chsk-router-loop!, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 35, :method-params ([event-handler ch-recv]), :protocol-impl nil, :arglists-meta (nil nil), :column 6, :line 1606, :end-line 1606, :max-fixed-arity 2, :fn-var true, :arglists (quote ([event-handler ch-recv])), :doc "DEPRECATED: Please use `start-chsk-router!` instead"}, chsk-send->closed! {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 776, :column 11, :end-line 776, :end-column 29, :private true, :arglists (quote ([?cb-fn]))}, :private true, :name taoensso.sente/chsk-send->closed!, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 29, :method-params ([?cb-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 776, :end-line 776, :max-fixed-arity 1, :fn-var true, :arglists (quote ([?cb-fn]))}, new-ChAutoSocket {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 1358, :column 11, :end-line 1358, :end-column 27, :private true, :arglists (quote ([opts]))}, :private true, :name taoensso.sente/new-ChAutoSocket, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 27, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 1358, :end-line 1358, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts]))}, swap-chsk-state! {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 797, :column 11, :end-line 797, :end-column 27, :private true, :arglists (quote ([chsk f])), :doc "Atomically swaps the value of chk's :state_ atom."}, :private true, :name taoensso.sente/swap-chsk-state!, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 27, :method-params ([chsk f]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 797, :end-line 797, :max-fixed-arity 2, :fn-var true, :arglists (quote ([chsk f])), :doc "Atomically swaps the value of chk's :state_ atom."}, handshake? {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 866, :column 11, :end-line 866, :end-column 21, :private true, :arglists (quote ([x]))}, :private true, :name taoensso.sente/handshake?, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 21, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 866, :end-line 866, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, ajax-call {:name taoensso.sente/ajax-call, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 1615, :column 12, :end-line 1615, :end-column 26, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 1615, :column 17, :end-line 1615, :end-column 26}, :doc "DEPRECATED: Please use `ajax-lite` instead"}, new-ChWebSocket {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 1114, :column 11, :end-line 1114, :end-column 26, :private true, :arglists (quote ([opts]))}, :private true, :name taoensso.sente/new-ChWebSocket, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 26, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 1114, :end-line 1114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts]))}, ChWebSocket {:num-fields 14, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative taoensso.sente/IChSocket cljs.core/IMap cljs.core/ILookup}, :name taoensso.sente/ChWebSocket, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 26, :type true, :column 15, :internal-ctor true, :line 929, :record true, :end-line 929, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, pull-unused-cb-fn! {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 791, :column 11, :end-line 791, :end-column 29, :private true, :arglists (quote ([cbs-waiting_ ?cb-uuid]))}, :private true, :name taoensso.sente/pull-unused-cb-fn!, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 29, :method-params ([cbs-waiting_ ?cb-uuid]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 791, :end-line 791, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cbs-waiting_ ?cb-uuid]))}, assert-event {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 135, :column 7, :end-line 135, :end-column 19, :arglists (quote ([x])), :doc "Returns given argument if it is a valid [ev-id ?ev-data] form. Otherwise\n  throws a validation exception."}, :name taoensso.sente/assert-event, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 19, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 135, :end-line 135, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns given argument if it is a valid [ev-id ?ev-data] form. Otherwise\n  throws a validation exception."}, chsk-reconnect! {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 761, :column 12, :end-line 761, :end-column 27, :arglists (quote ([chsk])), :doc "Useful for reauthenticating after login/logout, etc."}, :name taoensso.sente/chsk-reconnect!, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 27, :method-params ([chsk]), :protocol-impl nil, :arglists-meta (nil nil), :column 6, :line 761, :end-line 761, :max-fixed-arity 1, :fn-var true, :arglists (quote ([chsk])), :doc "Useful for reauthenticating after login/logout, etc."}, make-channel-socket-client! {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 1375, :column 10, :end-line 1375, :end-column 37, :arglists (quote ([path & [{:keys [type protocol host params recv-buf-or-n packer ws-kalive-ms client-id ajax-opts wrap-recv-evs? backoff-ms-fn], :as opts, :or {type :auto, recv-buf-or-n (async/sliding-buffer 2048), packer :edn, client-id (or (:client-uuid opts) (enc/uuid-str)), wrap-recv-evs? true, backoff-ms-fn enc/exp-backoff, ws-kalive-ms (enc/ms :secs 20)}} _deprecated-more-opts]])), :doc "Returns nil on failure, or a map with keys:\n       :ch-recv ; core.async channel to receive `event-msg`s (internal or from\n                ; clients). May `put!` (inject) arbitrary `event`s to this channel.\n       :send-fn ; (fn [event & [?timeout-ms ?cb-fn]]) for client>server send.\n       :state   ; Watchable, read-only (atom {:type _ :open? _ :uid _ :csrf-token _}).\n       :chsk    ; IChSocket implementer. You can usu. ignore this.\n\n     Common options:\n       :type           ; e/o #{:auto :ws :ajax}. You'll usually want the default (:auto).\n       :protocol       ; Server protocol, e/o #{:http :https}.\n       :host           ; Server host (defaults to current page's host).\n       :params         ; Map of any params to incl. in chsk Ring requests (handy\n                       ; for application-level auth, etc.).\n       :packer         ; :edn (default), or an IPacker implementation.\n       :ajax-opts      ; Base opts map provided to `taoensso.encore/ajax-lite`.\n       :wrap-recv-evs? ; Should events from server be wrapped in [:chsk/recv _]?\n       :ws-kalive-ms   ; Ping to keep a WebSocket conn alive if no activity\n                       ; w/in given msecs. Should be different to server's :ws-kalive-ms.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(path [{:keys [type protocol host params recv-buf-or-n packer ws-kalive-ms client-id ajax-opts wrap-recv-evs? backoff-ms-fn], :as opts, :or {type :auto, recv-buf-or-n (async/sliding-buffer 2048), packer :edn, client-id (or (:client-uuid opts) (enc/uuid-str)), wrap-recv-evs? true, backoff-ms-fn enc/exp-backoff, ws-kalive-ms (enc/ms :secs 20)}} _deprecated-more-opts])], :arglists ([path & [{:keys [type protocol host params recv-buf-or-n packer ws-kalive-ms client-id ajax-opts wrap-recv-evs? backoff-ms-fn], :as opts, :or {type :auto, recv-buf-or-n (async/sliding-buffer 2048), packer :edn, client-id (or (:client-uuid opts) (enc/uuid-str)), wrap-recv-evs? true, backoff-ms-fn enc/exp-backoff, ws-kalive-ms (enc/ms :secs 20)}} _deprecated-more-opts]]), :arglists-meta (nil)}}, :name taoensso.sente/make-channel-socket-client!, :variadic true, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 37, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(path [{:keys [type protocol host params recv-buf-or-n packer ws-kalive-ms client-id ajax-opts wrap-recv-evs? backoff-ms-fn], :as opts, :or {type :auto, recv-buf-or-n (async/sliding-buffer 2048), packer :edn, client-id (or (:client-uuid opts) (enc/uuid-str)), wrap-recv-evs? true, backoff-ms-fn enc/exp-backoff, ws-kalive-ms (enc/ms :secs 20)}} _deprecated-more-opts])], :arglists ([path & [{:keys [type protocol host params recv-buf-or-n packer ws-kalive-ms client-id ajax-opts wrap-recv-evs? backoff-ms-fn], :as opts, :or {type :auto, recv-buf-or-n (async/sliding-buffer 2048), packer :edn, client-id (or (:client-uuid opts) (enc/uuid-str)), wrap-recv-evs? true, backoff-ms-fn enc/exp-backoff, ws-kalive-ms (enc/ms :secs 20)}} _deprecated-more-opts]]), :arglists-meta (nil)}, :method-params [(path [{:keys [type protocol host params recv-buf-or-n packer ws-kalive-ms client-id ajax-opts wrap-recv-evs? backoff-ms-fn], :as opts, :or {type :auto, recv-buf-or-n (async/sliding-buffer 2048), packer :edn, client-id (or (:client-uuid opts) (enc/uuid-str)), wrap-recv-evs? true, backoff-ms-fn enc/exp-backoff, ws-kalive-ms (enc/ms :secs 20)}} _deprecated-more-opts])], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 1375, :end-line 1375, :max-fixed-arity 1, :fn-var true, :arglists ([path & [{:keys [type protocol host params recv-buf-or-n packer ws-kalive-ms client-id ajax-opts wrap-recv-evs? backoff-ms-fn], :as opts, :or {type :auto, recv-buf-or-n (async/sliding-buffer 2048), packer :edn, client-id (or (:client-uuid opts) (enc/uuid-str)), wrap-recv-evs? true, backoff-ms-fn enc/exp-backoff, ws-kalive-ms (enc/ms :secs 20)}} _deprecated-more-opts]]), :doc "Returns nil on failure, or a map with keys:\n       :ch-recv ; core.async channel to receive `event-msg`s (internal or from\n                ; clients). May `put!` (inject) arbitrary `event`s to this channel.\n       :send-fn ; (fn [event & [?timeout-ms ?cb-fn]]) for client>server send.\n       :state   ; Watchable, read-only (atom {:type _ :open? _ :uid _ :csrf-token _}).\n       :chsk    ; IChSocket implementer. You can usu. ignore this.\n\n     Common options:\n       :type           ; e/o #{:auto :ws :ajax}. You'll usually want the default (:auto).\n       :protocol       ; Server protocol, e/o #{:http :https}.\n       :host           ; Server host (defaults to current page's host).\n       :params         ; Map of any params to incl. in chsk Ring requests (handy\n                       ; for application-level auth, etc.).\n       :packer         ; :edn (default), or an IPacker implementation.\n       :ajax-opts      ; Base opts map provided to `taoensso.encore/ajax-lite`.\n       :wrap-recv-evs? ; Should events from server be wrapped in [:chsk/recv _]?\n       :ws-kalive-ms   ; Ping to keep a WebSocket conn alive if no activity\n                       ; w/in given msecs. Should be different to server's :ws-kalive-ms."}, cb-chan-as-fn {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 838, :column 11, :end-line 838, :end-column 24, :private true, :arglists (quote ([?cb ev])), :doc "Experimental, undocumented. Allows a core.async channel to be provided\n     instead of a cb-fn. The channel will receive values of form\n     [<event-id>.cb <reply>]."}, :private true, :name taoensso.sente/cb-chan-as-fn, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 24, :method-params ([?cb ev]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 838, :end-line 838, :max-fixed-arity 2, :fn-var true, :arglists (quote ([?cb ev])), :doc "Experimental, undocumented. Allows a core.async channel to be provided\n     instead of a cb-fn. The channel will receive values of form\n     [<event-id>.cb <reply>]."}, map->ChAutoSocket {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 1299, :column 15, :end-line 1299, :end-column 27, :internal-ctor true, :factory :map, :arglists (quote ([G__29652]))}, :name taoensso.sente/map->ChAutoSocket, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 27, :method-params ([G__29652]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :internal-ctor true, :factory :map, :line 1299, :end-line 1299, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__29652]))}, IChSocket {:meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 751, :column 17, :end-line 751, :end-column 26, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-chsk-connect! [[chsk]], -chsk-disconnect! [[chsk reason]], -chsk-reconnect! [[chsk]], -chsk-send! [[chsk ev opts]]}}}, :protocol-symbol true, :name taoensso.sente/IChSocket, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 26, :column 4, :line 751, :protocol-info {:methods {-chsk-connect! [[chsk]], -chsk-disconnect! [[chsk reason]], -chsk-reconnect! [[chsk]], -chsk-send! [[chsk ev opts]]}}, :info nil, :end-line 751, :tag any, :impls #{taoensso.sente/ChWebSocket taoensso.sente/ChAjaxSocket taoensso.sente/ChAutoSocket}, :doc nil, :jsdoc ("@interface")}, debug-mode?_ {:name taoensso.sente/debug-mode?_, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 113, :column 1, :end-line 113, :end-column 22, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 113, :column 10, :end-line 113, :end-column 22}, :tag any}, cb-success? {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 192, :column 16, :end-line 192, :end-column 27, :arglists (quote ([cb-reply-clj]))}, :name taoensso.sente/cb-success?, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 27, :method-params ([cb-reply-clj]), :protocol-impl nil, :arglists-meta (nil nil), :column 10, :line 192, :end-line 192, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cb-reply-clj]))}, ->ChWebSocket {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 929, :column 15, :end-line 929, :end-column 26, :internal-ctor true, :factory :positional, :arglists (quote ([client-id chs params packer url ws-kalive-ms state_ instance-handle_ retry-count_ ever-opened?_ backoff-ms-fn cbs-waiting_ socket_ udt-last-comms_]))}, :name taoensso.sente/->ChWebSocket, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 26, :method-params ([client-id chs params packer url ws-kalive-ms state_ instance-handle_ retry-count_ ever-opened?_ backoff-ms-fn cbs-waiting_ socket_ udt-last-comms_]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :internal-ctor true, :factory :positional, :line 929, :end-line 929, :max-fixed-arity 14, :fn-var true, :arglists (quote ([client-id chs params packer url ws-kalive-ms state_ instance-handle_ retry-count_ ever-opened?_ backoff-ms-fn cbs-waiting_ socket_ udt-last-comms_]))}, expected {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 120, :column 8, :end-line 120, :end-column 16, :private true, :arglists (quote ([expected x]))}, :private true, :name taoensso.sente/expected, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 16, :method-params ([expected x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 2, :fn-var true, :arglists (quote ([expected x]))}, ?node-npm-websocket_ {:meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 910, :column 19, :end-line 910, :end-column 39, :private true}, :private true, :name taoensso.sente/?node-npm-websocket_, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 39, :column 4, :line 910, :end-line 910, :tag cljs.core/Delay, :doc "nnil iff the websocket npm library[1] is available.\n     Easiest way to install:\n       1. Add the lein-npm[2] plugin to your `project.clj`,\n       2. Add: `:npm {:dependencies [[websocket \"1.0.23\"]]}`\n\n     [1] Ref. https://www.npmjs.com/package/websocket\n     [2] Ref. https://github.com/RyanMcG/lein-npm"}, start-server-chsk-router! {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 1545, :column 7, :end-line 1545, :end-column 32, :arglists (quote ([ch-recv event-msg-handler & [{:as opts, :keys [trace-evs? error-handler simple-auto-threading?]}]])), :doc "Creates a simple go-loop to call `(event-msg-handler <server-event-msg>)`\n  and log any errors. Returns a `(fn stop! [])`. Note that advanced users may\n  prefer to just write their own loop against `ch-recv`.\n\n  Nb performance note: since your `event-msg-handler` fn will be executed\n  within a simple go block, you'll want this fn to be ~non-blocking\n  (you'll especially want to avoid blocking IO) to avoid starving the\n  core.async thread pool under load. To avoid blocking, you can use futures,\n  agents, core.async, etc. as appropriate.\n\n  Or for simple automatic future-based threading of every request, enable\n  the `:simple-auto-threading?` opt (disabled by default).", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ch-recv event-msg-handler [{:as opts, :keys [trace-evs? error-handler simple-auto-threading?]}])], :arglists ([ch-recv event-msg-handler & [{:as opts, :keys [trace-evs? error-handler simple-auto-threading?]}]]), :arglists-meta (nil)}}, :name taoensso.sente/start-server-chsk-router!, :variadic true, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ch-recv event-msg-handler [{:as opts, :keys [trace-evs? error-handler simple-auto-threading?]}])], :arglists ([ch-recv event-msg-handler & [{:as opts, :keys [trace-evs? error-handler simple-auto-threading?]}]]), :arglists-meta (nil)}, :method-params [(ch-recv event-msg-handler [{:as opts, :keys [trace-evs? error-handler simple-auto-threading?]}])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1545, :end-line 1545, :max-fixed-arity 2, :fn-var true, :arglists ([ch-recv event-msg-handler & [{:as opts, :keys [trace-evs? error-handler simple-auto-threading?]}]]), :doc "Creates a simple go-loop to call `(event-msg-handler <server-event-msg>)`\n  and log any errors. Returns a `(fn stop! [])`. Note that advanced users may\n  prefer to just write their own loop against `ch-recv`.\n\n  Nb performance note: since your `event-msg-handler` fn will be executed\n  within a simple go block, you'll want this fn to be ~non-blocking\n  (you'll especially want to avoid blocking IO) to avoid starving the\n  core.async thread pool under load. To avoid blocking, you can use futures,\n  agents, core.async, etc. as appropriate.\n\n  Or for simple automatic future-based threading of every request, enable\n  the `:simple-auto-threading?` opt (disabled by default)."}, client-event-msg? {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 149, :column 7, :end-line 149, :end-column 24, :arglists (quote ([x]))}, :name taoensso.sente/client-event-msg?, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 24, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, map->ChWebSocket {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 929, :column 15, :end-line 929, :end-column 26, :internal-ctor true, :factory :map, :arglists (quote ([G__29505]))}, :name taoensso.sente/map->ChWebSocket, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :end-column 26, :method-params ([G__29505]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :internal-ctor true, :factory :map, :line 929, :end-line 929, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__29505]))}, next-idx! {:name taoensso.sente/next-idx!, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 260, :column 1, :end-line 260, :end-column 25, :private true, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/taoensso/sente.cljc", :line 260, :column 16, :end-line 260, :end-column 25, :private true}, :tag any}}, :cljs.spec/registry-ref [], :require-macros {cljs.core.async.macros cljs.core.async.macros, timbre taoensso.timbre, async cljs.core.async, cljs.core.async cljs.core.async, taoensso.sente taoensso.sente, enc taoensso.encore, taoensso.timbre taoensso.timbre, asyncm cljs.core.async.macros, taoensso.encore taoensso.encore, sente-macros taoensso.sente}, :cljs.analyzer/constants {:seen #{:curr-xhr_ :chsk/closed :?reply-fn :ws-kalive-ms :ajax-post-fn :ever-opened?_ :requested-disconnect :on-msg :flush? :cb :errors :send-buf-ms-ws :first-open? :taoensso.sente/nil-uid :default-client-side-ajax-timeout-ms :given ajax-opts cbs-waiting_ :ws :impl_ :get :lp-timeout-ms :websocket :chsk/recv :client-uuid :handshake :ch-recv :client-id :ev :last-error state_ :X-CSRF-Token ajax-chsk-opts :csrf-token-fn :?content :noop :else :on-close :sente/all-users-without-uid :protocol :wrong-id-type :newly-connected :connected-uids ws-kalive-ms curr-xhr_ :method :simple-auto-threading? :pathname :ws-chsk-opts ever-opened?_ :uid :trace-evs? :packer :chs :warn :server :chsk/ws-ping :trace :udt-last-comms_ :value :last-ws-error :chsk/uidport-open :?sch :swap/dissoc impl_ client-id :secs :handshake? :params :udt-next-reconnect :chsk/close :recur :type :chsk/state :unnamespaced-id :debug :debug/timeout :state :ajax :send-buf-ms-ajax :retry-count_ :chsk/bad-event :vector ws-chsk-opts :udt packer chs :chsk/bad-package :ajax-get-or-ws-handshake-fn :headers :internal udt-last-comms_ :error-handler :downgrading-ws-to-ajax :handshake-data :chsk/auto-ajax-downgrade :chsk/error :handshake-data-fn :reason :host params :event :backoff-ms-fn :wrong-type :user-id-fn :recv-buf-or-n :keyword :socket_ retry-count_ :ever-opened? :ppstr :id :open? :expected :edn :chsk/uidport-close :chsk-url-fn :url :code :lp-timeout :ring-req :chsk/timeout :http :handled :wrap-recv-evs? :?data :post :instance-handle_ :chsk :csrf-token :f :error :unexpected :send-fn :wrong-length :on-error :timeout :resp-type backoff-ms-fn :last-close :requested-reconnect :ajax-opts :cbs-waiting_ :actual :init? socket_ :ring.middleware.anti-forgery/anti-forgery-token :last-ws-close :auto :on-open url :timeout-ms :chsk/handshake instance-handle_ :apparent-success :?error :newly-disconnected :state_ :ajax-cb :any :chsk/dummy-cb-200 :<server :session :ajax-chsk-opts :text :clean? :namespaced-keyword}, :order [:expected :actual :type :value :wrong-type :vector :wrong-length :else :wrong-id-type :keyword :unnamespaced-id :namespaced-keyword :given :errors :chsk/bad-event :ch-recv :state :event :id :?data :send-fn :?reply-fn :client-id :connected-uids :uid :ring-req :warn :f :auto :chsk/closed :chsk/error :chsk/timeout :debug :chsk/bad-package :ajax-cb :trace :edn :recv-buf-or-n :ws-kalive-ms :secs :lp-timeout-ms :send-buf-ms-ajax :send-buf-ms-ws :user-id-fn :session :csrf-token-fn :csrf-token :ring.middleware.anti-forgery/anti-forgery-token :handshake-data-fn :packer :default-client-side-ajax-timeout-ms :taoensso.sente/nil-uid :ws :ajax :any :init? :udt :?sch :newly-connected :newly-disconnected :flush? :sente/all-users-without-uid :chsk/close :recur :ajax-post-fn :ajax-get-or-ws-handshake-fn :on-open :params :ppstr :chsk/dummy-cb-200 :chsk/handshake :error :on-msg :on-close :on-error :chsk/uidport-open :chsk/ws-ping :handshake? :swap/dissoc :chsk/uidport-close :websocket :requested-disconnect :timeout-ms :cb :state_ :first-open? :open? :udt-next-reconnect :chs :chsk/state :downgrading-ws-to-ajax :unexpected :requested-reconnect :last-close :reason :<server :ever-opened?_ :ever-opened? :handshake-data :internal :handled :url :instance-handle_ :retry-count_ :backoff-ms-fn :cbs-waiting_ :socket_ :udt-last-comms_ :apparent-success :ev :last-ws-error :handshake :noop :clean? :code :last-ws-close client-id chs params packer url ws-kalive-ms state_ instance-handle_ retry-count_ ever-opened?_ backoff-ms-fn cbs-waiting_ socket_ udt-last-comms_ :ajax-opts :curr-xhr_ :method :resp-type :headers :post :text :X-CSRF-Token :?error :?content :timeout :get :debug/timeout ajax-opts curr-xhr_ :ws-chsk-opts :ajax-chsk-opts :impl_ :chsk/auto-ajax-downgrade :last-error ws-chsk-opts ajax-chsk-opts impl_ :client-uuid :protocol :host :wrap-recv-evs? :lp-timeout :pathname :chsk-url-fn :http :chsk/recv :chsk :trace-evs? :error-handler :simple-auto-threading? :server]}, :doc "Channel sockets for Clojure/Script.\n\n      Protocol  | client>server | client>server ?+ ack/reply | server>user push\n    * WebSockets:       ✓              [1]                           ✓\n    * Ajax:            [2]              ✓                           [3]\n\n    [1] Emulate with cb-uuid wrapping\n    [2] Emulate with dummy-cb wrapping\n    [3] Emulate with long-polling\n\n  Abbreviations:\n    * chsk      - Channel socket (Sente's own pseudo \"socket\")\n    * server-ch - Underlying web server's async channel that implement\n                  Sente's server channel interface\n    * sch       - server-ch alias\n    * uid       - User-id. An application-level user identifier used for async\n                  push. May have semantic meaning (e.g. username, email address),\n                  may not (e.g. client/random id) - app's discretion.\n    * cb        - Callback\n    * tout      - Timeout\n    * ws        - WebSocket/s\n    * pstr      - Packed string. Arbitrary Clojure data serialized as a\n                  string (e.g. edn) for client<->server comms\n    * udt       - Unix timestamp (datetime long)\n\n  Special messages:\n    * Callback wrapping: [<clj> <?cb-uuid>] for [1], [2]\n    * Callback replies: :chsk/closed, :chsk/timeout, :chsk/error\n\n    * Client-side events:\n        [:chsk/handshake [<?uid> <?csrf-token> <?handshake-data> <first-handshake?>]]\n        [:chsk/state [<old-state-map> <new-state-map>]]\n        [:chsk/recv <ev-as-pushed-from-server>] ; Server>user push\n        [:chsk/ws-ping]\n\n    * Server-side events:\n        [:chsk/bad-package <packed-str>]\n        [:chsk/bad-event   <event>]\n        [:chsk/uidport-open  <uid>]\n        [:chsk/uidport-close <uid>]\n        [:chsk/ws-ping]\n\n  Channel socket state map:\n    :type               - e/o #{:auto :ws :ajax}\n    :open?              - Truthy iff chsk appears to be open (connected) now\n    :ever-opened?       - Truthy iff chsk handshake has ever completed successfully\n    :first-open?        - Truthy iff chsk just completed first successful handshake\n    :uid                - User id provided by server on handshake,    or nil\n    :csrf-token         - CSRF token provided by server on handshake, or nil\n    :handshake-data     - Arb user data provided by server on handshake\n    :last-ws-error      - ?{:udt _ :ev <WebSocket-on-error-event>}\n    :last-ws-close      - ?{:udt _ :ev <WebSocket-on-close-event>\n                            :clean? _ :code _ :reason _}\n    :last-close         - ?{:udt _ :reason _}, with reason e/o\n                            #{nil :requested-disconnect :requested-reconnect\n                             :downgrading-ws-to-ajax :unexpected}\n    :udt-next-reconnect - Approximate udt of next scheduled auto-reconnect attempt\n\n  Notable implementation details:\n    * core.async is used liberally where brute-force core.async allows for\n      significant implementation simplifications. We lean on core.async's\n      efficiency here.\n    * For WebSocket fallback we use long-polling rather than HTTP 1.1 streaming\n      (chunked transfer encoding). Http-kit _does_ support chunked transfer\n      encoding but a small minority of browsers &/or proxies do not. Instead of\n      implementing all 3 modes (WebSockets, streaming, long-polling) - it seemed\n      reasonable to focus on the two extremes (performance + compatibility).\n      In any case client support for WebSockets is growing rapidly so fallback\n      modes will become increasingly irrelevant while the extra simplicity will\n      continue to pay dividends.\n\n  General-use notes:\n    * Single HTTP req+session persists over entire chsk session but cannot\n      modify sessions! Use standard a/sync HTTP Ring req/resp for logins, etc.\n    * Easy to wrap standard HTTP Ring resps for transport over chsks. Prefer\n      this approach to modifying handlers (better portability)."}