{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{class}, :name sablono.normalize, :imports nil, :requires {set clojure.set, clojure.set clojure.set, str clojure.string, clojure.string clojure.string, util sablono.util, sablono.util sablono.util}, :cljs.spec/speced-vars [], :uses nil, :defs {map-lookup? {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/sablono/normalize.cljc", :line 22, :column 7, :end-line 22, :end-column 18, :arglists (quote ([x])), :doc "Returns true if `x` is a map lookup form, otherwise false."}, :name sablono.normalize/map-lookup?, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/sablono/normalize.cljc", :end-column 18, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if `x` is a map lookup form, otherwise false."}, attributes {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/sablono/normalize.cljc", :line 64, :column 7, :end-line 64, :end-column 17, :arglists (quote ([attrs])), :doc "Normalize the `attrs` of an element."}, :name sablono.normalize/attributes, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/sablono/normalize.cljc", :end-column 17, :method-params ([attrs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists (quote ([attrs])), :doc "Normalize the `attrs` of an element."}, compact-map {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/sablono/normalize.cljc", :line 7, :column 7, :end-line 7, :end-column 18, :arglists (quote ([m])), :doc "Removes all map entries where the value of the entry is empty."}, :name sablono.normalize/compact-map, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/sablono/normalize.cljc", :end-column 18, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Removes all map entries where the value of the entry is empty."}, children {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/sablono/normalize.cljc", :line 107, :column 7, :end-line 107, :end-column 15, :arglists (quote ([x])), :doc "Normalize the children of a HTML element."}, :name sablono.normalize/children, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/sablono/normalize.cljc", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Normalize the children of a HTML element."}, element {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/sablono/normalize.cljc", :line 137, :column 7, :end-line 137, :end-column 14, :arglists (quote ([[tag & content]])), :doc "Ensure an element vector is of the form [tag-name attrs content]."}, :name sablono.normalize/element, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/sablono/normalize.cljc", :end-column 14, :method-params ([p__10084]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[tag & content]])), :doc "Ensure an element vector is of the form [tag-name attrs content]."}, match-tag {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/sablono/normalize.cljc", :line 87, :column 7, :end-line 87, :end-column 16, :arglists (quote ([s])), :doc "Match `s` as a CSS tag and return a vector of tag name, CSS id and\n  CSS classes."}, :name sablono.normalize/match-tag, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/sablono/normalize.cljc", :end-column 16, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Match `s` as a CSS tag and return a vector of tag name, CSS id and\n  CSS classes."}, strip-css {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/sablono/normalize.cljc", :line 81, :column 7, :end-line 81, :end-column 16, :arglists (quote ([s])), :doc "Strip the # and . characters from the beginning of `s`."}, :name sablono.normalize/strip-css, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/sablono/normalize.cljc", :end-column 16, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Strip the # and . characters from the beginning of `s`."}, class {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/sablono/normalize.cljc", :line 27, :column 7, :end-line 27, :end-column 12, :arglists (quote ([class])), :doc "Normalize `class` into a vector of classes."}, :name sablono.normalize/class, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/sablono/normalize.cljc", :end-column 12, :method-params ([class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([class])), :doc "Normalize `class` into a vector of classes."}, class-name {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/sablono/normalize.cljc", :line 15, :column 7, :end-line 15, :end-column 17, :arglists (quote ([x]))}, :name sablono.normalize/class-name, :variadic false, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/sablono/normalize.cljc", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, merge-with-class {:protocol-inline nil, :meta {:file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/sablono/normalize.cljc", :line 71, :column 7, :end-line 71, :end-column 23, :arglists (quote ([& maps])), :doc "Like clojure.core/merge but concatenate :class entries.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(maps)], :arglists ([& maps]), :arglists-meta (nil)}}, :name sablono.normalize/merge-with-class, :variadic true, :file "/home/es/.boot/cache/tmp/home/es/src/semente/3nm/-uzzx0a/public/js/main.out/sablono/normalize.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(maps)], :arglists ([& maps]), :arglists-meta (nil)}, :method-params [(maps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 0, :fn-var true, :arglists ([& maps]), :doc "Like clojure.core/merge but concatenate :class entries."}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:else :content :default :id :class :tag}, :order [:else :class :tag :default :content :id]}, :doc nil}